#ifndef TEXTEDIT_H
#define TEXTEDIT_H

#include <QTextEdit>
#include <QObject>
#include <QCompleter>

#include <iostream>
#include <map>

#include "../algorithms/LevenshteinDistance.h"
#include "Highlighter.h"

/**
 * @brief Class for query editor, derives from QTextEdit
 */
class TextEdit : public QTextEdit
{
    Q_OBJECT
private:
    HighLighter* mHighlighter; /**< Highlighter - syntax highlighter for QTextEdit */
    bool mErrorDetection;
    int mDeviation;
    bool mOptimize;
    bool mNamingConventions;
public:
    /**
     * @brief Constructor for TextEdit object
     * @param parent QWidget - pointer to parent widget
     * @param readonly bool - is editor read-only
     */
    explicit TextEdit(QWidget* parent = nullptr, bool readonly = false);

    void setHighLighter(HighLighter* highlighter);

    bool isErrorDetection() const { return mErrorDetection; }
    bool isOptimized() const { return mOptimize; }
    bool isNamingConventions() const { return mNamingConventions; }
private:
    /**
     * @brief Create replace menu
     * @return QMenu - created menu
     */
    QMenu* createReplaceMenu();

    bool eventFilter(QObject* object, QEvent* event);

signals:
    void spacePressed();

private slots:
    /**
     * @brief When pressed on one of the special symbol/operator buttons, that symbol will be added into the editor
     * @param character QString - character to be added to the editor
     */
    void onCharacterAdded(const QString& character) { insertPlainText(character); }
    /**
     * @brief When user right-clicks, custom menu will appear with replacement for selected word, generated by the
     *        Levenshtein distance algorithm
     * @param QPoint - position where user right-clicked
     */
    void onCustomMenu(const QPoint& pos);
    /**
     * @brief Replace selected text by suggestion proposed by Levenshtein algorithm that user selected
     * @param act QAction - action performed by user
     */
    void onCorrect(QAction* act);

    void onErrorDetection(bool b)
    {
        mErrorDetection = b;
        mHighlighter->setErrorDetection(b);
    }
    void onDeviation(const QString& s)
    {
        mDeviation = s.toInt();
        mHighlighter->setDeviation(s.toInt());
    }
    void onOptimize(bool b) { mOptimize = b; }
    void onNamingConventions(bool b) { mNamingConventions = b; }
};

#endif // TEXTEDIT_H
